## BFS, time - O((V+E)*N_initial), space - O(N)
from collections import defaultdict, deque


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        infectedBy = defaultdict(list)

        for init in initial:
            visited = set(initial)
            dq = deque([init])
            while dq:
                node = dq.pop()
                for i in range(len(graph[node])):
                    if graph[node][i] == 1:
                        if i not in visited:
                            visited.add(i)
                            infectedBy[i].append(init)
                            dq.appendleft(i)

        res = [0] * len(graph)
        for node in infectedBy:
            if len(infectedBy[node]) == 1:
                res[infectedBy[node][0]] += 1
        maxNum = max(res)
        return res.index(maxNum) if maxNum else min(initial)